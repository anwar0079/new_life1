# -*- coding: utf-8 -*-
"""parc_assign_final_descrip.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H4mBtPp-SvHm9-RN6GoFNpiDmFs3g-O9
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
from IPython.display import display, HTML
file_path = "/content/sample_data/case-study-data_me.xlsx"
data_base = pd.read_excel(file_path, sheet_name=None)
print(data_base.keys())

#read all table from .xlsx file by pandas dataframae.
sheet_name1 = "Fact_table"
sheet_name2 = "Trans_dim"
sheet_name3 = "Item_dim"
sheet_name4 = "Customer_dim"
sheet_name5 = "Time_dim"
sheet_name6 = "Store_dim"
fact_table = data_base[sheet_name1]
trans_dim = data_base[sheet_name2]
item_dim = data_base[sheet_name3]
customer_dim = data_base[sheet_name4]
time_dim = data_base[sheet_name5]
store_dim = data_base[sheet_name6]
print(fact_table.info())
print(trans_dim.info())
print(item_dim.info())
print(customer_dim.info())
print(time_dim.info())
print(store_dim.info())

from datetime import datetime, date
fact_table.drop_duplicates(inplace=True)
trans_dim.drop_duplicates(inplace=True)
item_dim.drop_duplicates(inplace=True)
customer_dim.drop_duplicates(inplace=True)
time_dim.drop_duplicates(inplace=True)
store_dim.drop_duplicates(inplace=True)
customer_dim.rename(columns={'district': 'customer_district'}, inplace=True)
store_dim.rename(columns={'district': 'store_district'}, inplace=True)
time_dim['date'] = pd.to_datetime(time_dim['date'])
time_dim['normal_date'] = time_dim['date'].dt.normalize()

item_dim.info()

print(fact_table.isnull().sum())
print(trans_dim.isnull().sum())
print(item_dim.isnull().sum())
print(customer_dim.isnull().sum())
print(time_dim.isnull().sum())
print(store_dim.isnull().sum())

trans_dim.fillna('Cash_Transection', inplace=True)
fact_table.drop(['unit'], axis=1, inplace=True)
fact_table.drop(['quantity_sold'], axis=1, inplace=True)
fact_table.drop(['unit_price'], axis=1, inplace=True)
print(fact_table.head().to_string())

fact_table_new1 = fact_table.merge(time_dim[['time_key','normal_date','week','month','year']], on='time_key', how='left')
fact_table_new2 = fact_table_new1.merge(trans_dim[['payment_key', 'trans_type', 'bank_name']], on='payment_key', how='left')
fact_table_new3 = fact_table_new2.merge(item_dim[['item_key', 'item_type','man_country','supplier']], on='item_key', how='left')
fact_table_new4 = fact_table_new3.merge(customer_dim[['customer_key','customer_district']], on='customer_key', how='left')
fact_table_new5 = fact_table_new4.merge(store_dim[['store_key', 'store_size','store_district', 'upazila']], on='store_key', how='left')
fact_table_new5['month_name'] = fact_table_new5['normal_date'].dt.strftime("%B")
print(fact_table_new5.info())
print(fact_table_new5.head().to_string())

customer_group = fact_table_new5.groupby("customer_key")["total_price"].sum().reset_index()
customer_group.sort_values(by=['total_price'], ascending=False, inplace=True)
print(customer_group.head().to_string())

mean_value = customer_group['total_price'].mean()
print(mean_value)

def getClass(total_price):
  if (total_price >= (mean_value*1.5)):
      return "VVIP"
  if (total_price >= (mean_value) and total_price < (mean_value*1.5)):
     return "VIP"
  else:
     return "Regular"
customer_group['customer_class'] = customer_group['total_price'].apply(getClass)
print(customer_group.head(10).to_string())
print(customer_group['customer_class'].count())

customer_group1 = customer_group.groupby('customer_class')['customer_class'].count()
print(customer_group1)

fact_table_new6 = fact_table_new5.merge(customer_group[['customer_key','customer_class']], on='customer_key', how='left')
print(fact_table_new6.head().to_string())

sotre_group = fact_table_new6.groupby("store_key")["total_price"].sum().reset_index()
sotre_group.sort_values(by=['total_price'], ascending=False, inplace = True)

arr = np.array(sotre_group['store_key'])
newarr = np.array_split(arr, 3)
print(newarr[0])
print(newarr[1])
print(newarr[2])

def getStore(store_key):
  if (store_key in newarr[0].tolist()):
      return "A"
  elif (store_key in newarr[1].tolist()):
      return "B"
  elif (store_key in newarr[2].tolist()):
      return "C"
fact_table_new6['store_category'] = fact_table_new6['store_key'].apply(getStore)
print(fact_table_new6.head(20).to_string())
print(fact_table_new6.info())

fact_table_analysis1 = fact_table_new6.copy()
fact_table_analysis1.sort_values(by='normal_date', ascending=True, inplace=True)
print(fact_table_analysis1.head().to_string())
print(fact_table_analysis1.tail().to_string())
fact_table_analysis1.drop(fact_table_analysis1[fact_table_analysis1['year'] == 2021].index, inplace= True)
print(fact_table_analysis1.tail().to_string())

print(fact_table_analysis1.info())

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
# %matplotlib inline
df_trans_type = fact_table_analysis1.groupby("trans_type")["total_price"].sum().reset_index()
df_trans_type['total_price'] = df_trans_type['total_price'].round()
df_trans_type['total_price_percent'] = (df_trans_type['total_price'] / df_trans_type['total_price'].sum()) * 100
df_trans_type['total_price_percent'] = df_trans_type['total_price_percent'].round()
y = df_trans_type['total_price']
mylabels = ['card 83%', 'cash 7%', 'mobile_banking 10%']
font1 = {'family':'serif','color':'g','size':12, 'weight' : 'bold'}
font2 = {'family':'serif','color':'#FF6347','size':10, 'weight' : 'bold'}
myexplode = [0.05,0.05,0.05]
mycolors = ["#B266FF", "b", "g"]
plt.title("Percentage of Total Price Paid By Each Payment Medium", fontdict = font1, loc = 'left')
plt.pie(y, labels = mylabels, colors = mycolors, explode = myexplode)
plt.legend(title = "Transection medium:", loc='center left', bbox_to_anchor=(.9, 0.8))
plt.show()

df_payment_methode1 = fact_table_analysis1.groupby(["year","trans_type"])["total_price"].sum().reset_index()
df_payment_methode1['total_price'] = df_payment_methode1['total_price'].round()
print(df_payment_methode1.to_string())
plt.figure(figsize=(6,4))
custom_palette = sns.color_palette(["#00FF00", "#CC0066", "#0000FF"])
sns.lineplot(x=df_payment_methode1["year"], y = df_payment_methode1["total_price"],palette=custom_palette,linewidth=1.5, data = df_payment_methode1, hue = 'trans_type')
plt.legend(title = "Payment medium", loc='best')
plt.title("Total Sales in Each Year Paid by Each Medium", fontdict = font1, loc = 'left')
plt.xlabel('year---->', fontdict = font2)
plt.ylabel('total_sales(milion)---->', fontdict = font2)
plt.grid(ls = '--', c = '#808080')

df_bank_name = fact_table_analysis1.groupby("bank_name")["total_price"].sum().reset_index()
df_bank_name_mobile = df_bank_name.drop(df_bank_name[~df_bank_name['bank_name'].isin(['Bkash','Nagad','Rocket'])].index)
df_bank_name_mobile['total_price_percent'] = (df_bank_name_mobile['total_price'] / df_bank_name_mobile['total_price'].sum()) * 100
df_bank_name_mobile['total_price_percent'] = df_bank_name_mobile['total_price_percent'].round()
print(df_bank_name_mobile.head())
y = df_bank_name_mobile['total_price']
myexplode = [0.05,0.05,0.05]
mycolors = ["#FF9933", "b", "g"]
mylabels = ['Bkash 56%', 'Nagad 24%', 'Rocket 20%']
plt.pie(y, labels = mylabels, colors = mycolors, explode = myexplode)
plt.legend(title = "Mobile Bankig Medium:", loc='center left', bbox_to_anchor=(1, 0.8))
plt.title("Contribution of Each Mobile Banking Company", fontdict = font1, loc = 'left')
plt.show()

df_bank_name = fact_table_analysis1.groupby("bank_name")["total_price"].sum().reset_index()
df_bank_name_bank = df_bank_name.drop(df_bank_name[df_bank_name['bank_name'].isin(['Cash_Transection','Bkash','Nagad','Rocket'])].index)
df_bank_name_bank.sort_values(by=['total_price'], ascending=False, inplace=True)
print(df_bank_name_bank.head(10))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("Bank Limited", ""))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("Bank Ltd", ""))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("Limited", ""))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("South Bangla Agriculture and Commerce", "SBAC"))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("National Credit & Commerce", "NCC"))
df_bank_name_bank["bank_name"] = df_bank_name_bank["bank_name"].apply(lambda x: x.replace("Community Bank Bangladesh", "CBB"))
plt.figure(figsize = (5, 2.5))
sns.barplot(x=df_bank_name_bank["bank_name"], y=df_bank_name_bank["total_price"], color = "#3380FF", data = df_bank_name_bank)
plt.title("Bank Wise Total Payment", fontdict = font1, loc = 'left')
plt.xticks(rotation=90, ha='right')
plt.xlabel('bank_name',fontdict = font2)
plt.ylabel('total_payment',fontdict = font2)
plt.grid(ls = '--', c = '#FF99FF')

df_yearwise_all = fact_table_analysis1.groupby(["year"])["total_price"].sum().reset_index()
display(HTML('<h5 style="color:green;font-size:130%;"> Yearly Total Sales Table</h5>'))
print(df_yearwise_all.to_string())
plt.figure(figsize=(6,2.5))
sns.lineplot(x=df_yearwise_all["year"], y= df_yearwise_all["total_price"], data = df_yearwise_all,linewidth=3)
plt.legend(["Total Sales"], loc='best')
plt.title("Yearly Total Sales Graph", fontdict = font1, loc = 'left')
plt.xlabel('year---------------->', fontdict = font2)
plt.ylabel('total_sales (million)----->', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_monthwise1 = fact_table_analysis1.groupby(["month"])["total_price"].sum().reset_index()
df_monthwise1['average_monthly'] = (df_monthwise1['total_price']/7).round()
df_monthwise = fact_table_analysis1.groupby(["year","month"])["total_price"].sum().reset_index()
plt.figure(figsize=(6,4))
custom_palette = sns.color_palette(["#FF6347", "#4682B4", "#32CD32","#00FFFF","#6666FF", "#999900","#000080"])
sns.lineplot(x=df_monthwise["month"], y=df_monthwise["total_price"], data = df_monthwise,palette=custom_palette,linewidth=1.2, hue = df_monthwise["year"])
sns.lineplot(x=df_monthwise1["month"], y=df_monthwise1["average_monthly"], data = df_monthwise1, linewidth=4, color = '#FF3399')
plt.legend(title = "Year", loc='center left', bbox_to_anchor=(1, 0.5))
plt.title("Total Monthly Sales in Each Year VS Average Monthly Sales", fontdict = font1, loc = 'left')
plt.xlabel('month', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_weekwise_all = fact_table_analysis1.groupby(["month","week"])["total_price"].sum().reset_index()
df_weekwise_all['average_monthly'] = (df_weekwise_all['total_price']/7).round()
plt.figure(figsize=(6,3))
custom_palette = sns.color_palette(["#999900","#66FFFF","#6666FF","#FF6347"])
sns.lineplot(x=df_weekwise_all["month"], y=df_weekwise_all['average_monthly'], data = df_weekwise_all,palette=custom_palette, linewidth=2.5, hue = df_weekwise_all["week"])
plt.title("Average Weekly Sales in Each Month", fontdict = font1, loc = 'left')
plt.legend(title = "Week:", loc='center left', bbox_to_anchor=(1, 0.5))
plt.xlabel('month', fontdict = font2)
plt.ylabel('average_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_weekwise_vio = fact_table_analysis1.groupby(["month","week"])["total_price"].sum().reset_index()
df_weekwise_vio['average_monthly'] = (df_weekwise_vio['total_price']/7).round()
plt.figure(figsize=(7, 3.5))
plt.grid(True)
sns.violinplot(x=df_weekwise_vio["week"], y=df_weekwise_vio["average_monthly"], data = df_weekwise_all, color="#80FF00")
plt.title("Average Weekly_Sales violinplot", fontdict = font1, loc = 'left')
plt.xlabel('week', fontdict = font2)
plt.ylabel('average_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

import matplotlib.patches as mpatches
df_yearwise_all = fact_table_analysis1.groupby(["year"])["total_price"].sum().reset_index()
df_yearwise_all['average_yearly_sales_per_store']= (df_yearwise_all['total_price']/44).round()
df_mystore = fact_table_analysis1[fact_table_analysis1['store_key']=='S0021'].copy()
df_yearwise_mystore1 = df_mystore.groupby(["year"])["total_price"].sum().reset_index()
plt.figure(figsize=(6,3))
sns.lineplot(x=df_yearwise_all["year"], y= df_yearwise_all["average_yearly_sales_per_store"], data = df_yearwise_all,linewidth=3,color ="#6666FF")
sns.lineplot(x=df_yearwise_mystore1["year"], y=df_yearwise_mystore1["total_price"], data = df_yearwise_mystore1,linewidth=3, color ="#FF6347")
all_store = mpatches.Patch(color='#6666FF', label='All store')
my_store = mpatches.Patch(color='#FF6347', label='My store')
plt.legend(handles=[all_store, my_store], loc='best', framealpha=0.5, frameon=True)
plt.title("Yearly Average Sales Per Store VS My Store S0021", fontdict = font1, loc = 'left')
plt.xlabel('year', fontdict = font2)
plt.ylabel('average_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')
plt.tight_layout()

import matplotlib.patches as mpatches
df_yearwise_all2 = fact_table_analysis1.groupby(["month"])["total_price"].sum().reset_index()
df_yearwise_all2['av_monthly_sales_perstore_peryear']= (df_yearwise_all2['total_price']/44).round()
df_yearwise_all2['av_monthly_sales_perstore_pemonth']= (df_yearwise_all2['av_monthly_sales_perstore_peryear']/7).round()
df_yearwise_mystore2 = df_mystore.groupby(["month"])["total_price"].sum().reset_index()
df_yearwise_mystore2['av_monthly_sales_mystore']= (df_yearwise_mystore2['total_price']/7).round()
plt.figure(figsize=(6,3))
sns.lineplot(x=df_yearwise_all2["month"], y= df_yearwise_all2["av_monthly_sales_perstore_pemonth"], data = df_yearwise_all2,linewidth=3,color ="#32CD32")
sns.lineplot(x=df_yearwise_mystore2["month"], y=df_yearwise_mystore2["av_monthly_sales_mystore"], data = df_yearwise_mystore2,linewidth=3, color ="#FF66FF")
all_store = mpatches.Patch(color="#32CD32", label='All store')
my_store = mpatches.Patch(color='#FF66FF', label='My store')
plt.legend(handles=[all_store, my_store], loc='best', framealpha=0.5, frameon=True)
plt.title("Monthly Average Sales Per Store VS My Store S0021", fontdict = font1, loc = 'left')
plt.xlabel('month', fontdict = font2)
plt.ylabel('average_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')
plt.tight_layout()

"""Customerwish Analysis"""

import matplotlib.patches as mpatches
df_customer_year = fact_table_analysis1.groupby(["year"])["customer_key"].count().reset_index()
df_customer_year['average_customer_per_store']= (df_customer_year["customer_key"]/44).round()
df_customer_mystore1 = df_mystore.groupby(["year"])["customer_key"].count().reset_index()
plt.figure(figsize=(6,3))
sns.lineplot(x=df_customer_year["year"], y = df_customer_year["average_customer_per_store"],linewidth=3, data = df_customer_year, color = '#4682B4')
sns.lineplot(x=df_customer_mystore1["year"], y=df_customer_mystore1["customer_key"], data = df_customer_mystore1,linewidth=3, color ="#FF66FF")
all_store = mpatches.Patch(color="#32CD32", label='All store')
my_store = mpatches.Patch(color='#FF66FF', label='My store')
plt.legend(handles=[all_store, my_store], loc='best', framealpha=0.5, frameon=True)
plt.title("Customer Connected Per Store VS My Store S0021", fontdict = font1, loc = 'left')
plt.xlabel('year', fontdict = font2)
plt.ylabel('number of customers', fontdict = font2)
plt.grid(ls = '--', c = '#808080')

import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
df_cust_group_allstore = fact_table_analysis1.groupby('customer_class')["customer_key"].count().reset_index(name='number')
df_cust_group_allstore['percentage'] = (df_cust_group_allstore['number'] / df_cust_group_allstore['number'].sum() * 100).round(0)
df_cust_group_mystore = df_mystore.groupby('customer_class')["customer_key"].count().reset_index(name='number')
df_cust_group_mystore['percentage'] = (df_cust_group_mystore['number'] / df_cust_group_mystore['number'].sum() * 100).round(0)
customer_classes = df_cust_group_allstore['customer_class'].tolist()
x = np.arange(len(customer_classes))
plt.figure(figsize=(6, 3))
width = 0.2
plt.bar(x - width/2, df_cust_group_allstore['percentage'], width, label='All store', color="#4682B4")
plt.bar(x + width/2, df_cust_group_mystore['percentage'], width, label='My store', color="#FF66FF")
plt.xticks(x, customer_classes)  # Set x-axis tick labels to customer classes
plt.title("Customer Percentage by Class: All Store vs My Store S0021", fontdict=font1, loc='left')
plt.xlabel('Customer Class', fontdict=font2)  # Update x-axis label
plt.ylabel('Percentage of Customers', fontdict=font2)  # Update y-axis label
plt.legend(loc='best', framealpha=0.5, frameon=True)
plt.grid(ls='--', c='#808080')
plt.tight_layout()

"""Manufacturing countrywise"""

df_man_country = fact_table_analysis1.groupby(["year","man_country"])["total_price"].sum().reset_index()
df_man_country.sort_values(by=['total_price'], ascending=False, inplace=True)
plt.figure(figsize = (5, 3))
sns.lineplot(x=df_man_country["year"], y=df_man_country["total_price"],data = df_man_country, linewidth=2.5, hue = "man_country")
plt.title("Manufacturing countrywise total yearly sales", fontdict = font1, loc = 'left')
plt.legend(title = "Manufacturing countries:", loc='center left', bbox_to_anchor=(1, 0.5))
plt.xlabel('year', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_man_country_item = fact_table_analysis1.groupby(["man_country","item_key"])["total_price"].sum().reset_index()
df_man_country_item.sort_values(by=['total_price'], ascending=False, inplace=True)
print(df_man_country_item.head(10).to_string())
df_man_country_item_no = df_man_country_item.groupby(["man_country"])['item_key'].count().reset_index()
df_man_country_item_no.sort_values(by=['item_key'], ascending=False, inplace=True)
print(df_man_country_item_no.to_string())

df_supplier = fact_table_analysis1.groupby(["year","supplier"])["total_price"].sum().reset_index()
df_supplier.sort_values(by=['total_price'], ascending=False, inplace=True)
plt.figure(figsize = (4.5, 3))
sns.lineplot(x=df_supplier["year"], y=df_supplier["total_price"],data = df_supplier, linewidth=2.5, hue = "supplier")
plt.title("Supplierwise total yearly sales", fontdict = font1, loc = 'left')
plt.legend(title = "Suppliers name", loc='center left', bbox_to_anchor=(1, 0.5))
plt.xlabel('year', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

"""Item typewise analysis"""

df_suppli_item = fact_table_analysis1.groupby(["supplier","item_key"])["total_price"].sum().reset_index()
df_suppli_item.sort_values(by=['total_price'], ascending=False, inplace=True)
print(df_suppli_item.head(10).to_string())
df_suppli_item_no = df_suppli_item.groupby(["supplier"])['item_key'].count().reset_index()
df_suppli_item_no.sort_values(by=['item_key'], ascending=False, inplace=True)
print(df_suppli_item_no.to_string())

df_item_type = fact_table_analysis1.groupby("item_type")["total_price"].sum().reset_index()
df_item_type['total_price'] = df_item_type['total_price'].round()
df_item_type.sort_values(by=['total_price'], ascending=False, inplace=True)
plt.figure(figsize = (7, 2))
sns.barplot(x=df_item_type["item_type"], y=df_item_type["total_price"], color = "#4CAF50", data = df_item_type)
plt.title("Item Typewise Total Sales", fontdict = font1, loc = 'left')
plt.xticks(rotation=90, ha='right')
plt.xlabel('item_type', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#99CCFF')

df_all_store_top = fact_table_analysis1.groupby(["item_key"])["total_price"].sum().reset_index(name ='total_sales')
df_all_store_top.sort_values(by=['total_sales'], ascending=False, inplace=True)
df_all_store_top1 = df_all_store_top.merge(item_dim[['item_key','item_name','item_type']], on='item_key', how='left')
display(HTML('<h5 style="color:green;font-size:130%;"> Top Five Most Sold Item In All Store</h5>'))
print(df_all_store_top1.head(5).to_string())
df_my_store_top = df_mystore.groupby(["item_key"])["total_price"].sum().reset_index(name ='total_sales')
df_my_store_top.sort_values(by=['total_sales'], ascending=False, inplace=True)
df_my_store_top1 = df_my_store_top.merge(item_dim[['item_key','item_name','item_type']], on='item_key', how='left')
display(HTML('<h5 style="color:green;font-size:130%;"> Top Five Most Sold Item In My Store</h5>'))
print(df_my_store_top1.head(5).to_string())

most_attached_item = fact_table_analysis1.groupby("item_key",)["total_price"].count().reset_index(name = "times")
most_attached_item .sort_values(by='times', ascending=False, inplace=True)
most_attached_item1 = most_attached_item .merge(item_dim[['item_key','item_name','item_type','man_country']], on='item_key', how='left')
display(HTML('<h5 style="color:green;font-size:130%;"> Top Five Most Attached Items With Transections</h5>'))
print(most_attached_item1.head(5).to_string())
display(HTML('<h5 style="color:green;font-size:130%;"> Positions Of My Items In Most Attached Items With Transections</h5>'))
print(most_attached_item1[most_attached_item1 ['item_key'].isin(['I00199','I00214'])].to_string())

df_my_item_sales = fact_table_analysis1[(fact_table_analysis1['item_key']=='I00199') | (fact_table_analysis1['item_key']=='I00214')].copy()
# The line below was changed. Replace df_my_item_sales2 with total_price
df_my_item_sales1= df_my_item_sales.groupby(["year","item_key"])["total_price"].sum().reset_index()
df_my_item_sales2 = df_my_item_sales1.merge(item_dim[['item_key','item_name']], on='item_key', how='left')
df_my_item_sales2.sort_values(by=['total_price'], ascending=False, inplace=True)
plt.figure(figsize = (6, 2.5))
sns.lineplot(x=df_my_item_sales2["year"], y=df_my_item_sales2["total_price"],data = df_my_item_sales2, linewidth=2.5, hue = "item_key")
plt.title("Yearly Total Sales of My Items", fontdict = font1, loc = 'left')
plt.legend(title = "My Items", loc='best')
plt.xlabel('year', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_store_location = fact_table_analysis1.groupby(["upazila"])["total_price"].sum().reset_index()
df_store_location['total_price'] = df_store_location['total_price'].round()
df_store_location.sort_values(by=['total_price'], ascending=False, inplace=True)
df_store_location.drop(df_store_location[df_store_location['total_price']<df_store_location['total_price'].mean()].index, inplace= True)
plt.figure(figsize=(6,3))
sns.barplot(x=df_store_location["upazila"], y=df_store_location["total_price"], color = "#0082B4", data = df_store_location)
plt.title("Location of store with highest total sales ", fontdict = font1, loc = 'left')
plt.xticks(rotation=45, ha='right')
plt.xlabel('store_location', fontdict = font2)
plt.ylabel('total_sales', fontdict = font2)
plt.grid(ls = '--', c = '#C0C0C0C0')

df_my_item_sales2 = fact_table_analysis1[(fact_table_analysis1['item_key']=='I00199')].copy()
df_my_item_sales3 = fact_table_analysis1[(fact_table_analysis1['item_key']=='I00214')].copy()
df_my_item_sales4 = df_my_item_sales2.groupby(["store_key"])["total_price"].sum().reset_index()
df_my_item_sales5= df_my_item_sales3.groupby(["store_key"])["total_price"].sum().reset_index()
df_my_item_sales4.sort_values(by=['total_price'], ascending=False, inplace=True)
df_my_item_sales5.sort_values(by=['total_price'], ascending=False, inplace=True)
df_my_item_sales_199 = df_my_item_sales4.merge(store_dim[['store_key','upazila']], on='store_key', how='left')
df_my_item_sales_214 = df_my_item_sales5.merge(store_dim[['store_key','upazila']], on='store_key', how='left')
display(HTML('<h5 style="color:green;font-size:130%;"> Top Five Store For Highest Sales of Item I00199 (Deluxe Mixed Nuts with Seasalt)</h5>'))
print(df_my_item_sales_199.head(5).to_string())
print("")
display(HTML('<h5 style="color:green;font-size:130%;"> Top Five Store For Highest Sales of Item I00214 (Kellogg’s Fruity Snacks ) </h5>'))
print(df_my_item_sales_214.head(5).to_string())

df_corr = fact_table_analysis1[['store_key','store_category','store_size','month_name','total_price']].copy()
df_corr1 = df_corr.groupby(['store_key','store_category','store_size','month_name'])[['total_price']].sum().reset_index()
df_corr1['monthly_sales'] = round(df_corr1['total_price']/7,2)
df_corr1.drop('total_price', axis=1, inplace=True)
print(df_corr1.head().to_string())
print(df_corr1.info())

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
df_corr_sales_multi2 = df_corr1.copy()
ohc = OneHotEncoder(drop='first')
tmp = ohc.fit_transform(df_corr_sales_multi2[['store_category']])
df_corr_sales_multi2[ohc.categories_[0][1:]] = tmp.toarray()
ohc = OneHotEncoder(drop = 'first')
df_corr_sales_multi2.drop('store_category', axis=1, inplace=True)
tmp = ohc.fit_transform(df_corr_sales_multi2[['store_size']])
df_corr_sales_multi2[ohc.categories_[0][1:]] = tmp.toarray()
ohc = OneHotEncoder(drop = 'first')
df_corr_sales_multi2.drop('store_size', axis=1, inplace=True)
tmp = ohc.fit_transform(df_corr_sales_multi2[['month_name']])
df_corr_sales_multi2[ohc.categories_[0][1:]] = tmp.toarray()
ohc = OneHotEncoder(drop = 'first')
df_corr_sales_multi2.drop('month_name', axis=1, inplace=True)
df_corr_sales_multi2.drop('store_key', axis=1, inplace=True)
print(df_corr_sales_multi2.head().to_string())

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
X = df_corr_sales_multi2.drop(['monthly_sales'], axis=1)
y = df_corr_sales_multi2['monthly_sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, random_state=42)
MLRModel1 = LinearRegression()
MLRModel1.fit(X_train, y_train)

display(HTML('<h5 style="color:green;font-size:130%;"> X_train columns</h5>'))
print(X_train.columns.size)
display(HTML('<h5 style="color:green;font-size:130%;"> Coefficient  of multiple linear regression</h5>'))
print(np.round(MLRModel1.coef_, 2))
display(HTML('<h5 style="color:green;font-size:130%;"> Intercept of multiple linear regression</h5>'))
print(np.round(MLRModel1.intercept_,2))

sns.barplot(x=MLRModel1.coef_, y=X_train.columns)

MLRModel1.score(X_test, y_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, confusion_matrix, r2_score
def eval(MLRModel1, X_train, y_train, X_test, y_test):
    print("The training score is,", MLRModel1.score(X_train, y_train), end='\n')
    print("The testing score is,", MLRModel1.score(X_test, y_test))
    ypredict = MLRModel1.predict(X_test)
    print("The mean absolute error is: ", mean_absolute_error(y_test, ypredict))
    print("The mean squared error is: ", mean_squared_error(y_test, ypredict))
    print("The R2 score is: ", r2_score(y_test, ypredict))

eval(MLRModel1, X_train, y_train, X_test, y_test)

task = [
    ['S0001', 'February']
]
display(HTML('<h6 style="color:green;font-size:130%;">Task Table</h6>'))
print("")
desired_columns = ['store_key', 'month_name']
taskdf = pd.DataFrame(task, columns=desired_columns)
print(taskdf.to_string())

taskdf['store_category'] = taskdf['store_key'].apply(getStore)
taskdf1= taskdf.merge(store_dim[['store_key', 'store_size']], on='store_key', how='left')
taskdf1.drop('store_key', axis=1, inplace=True)
print(taskdf1.head().to_string())

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
taskdf2 = taskdf1.copy()
ohc = OneHotEncoder()
tmp = ohc.fit_transform(taskdf2[['month_name']])
taskdf2[ohc.categories_[0][0:]] = tmp.toarray()
taskdf2.drop('month_name', axis=1, inplace=True)
tmp = ohc.fit_transform(taskdf2[['store_size']])
taskdf2[ohc.categories_[0][0:]] = tmp.toarray()
taskdf2.drop('store_size', axis=1, inplace=True)
tmp = ohc.fit_transform(taskdf2[['store_category']])
taskdf2[ohc.categories_[0][0:]] = tmp.toarray()
taskdf2.drop('store_category', axis=1, inplace=True)
print(taskdf2.head().to_string())

missing_cols = set(X_train.columns) - set(taskdf1.columns)
for col in missing_cols:
    taskdf1[col] = 0
# Reorder columns to match x_train
taskdf1 = taskdf1[X_train.columns]
# Now it can predict using the Multiple_LRModel
predictions = MLRModel1.predict(taskdf1)
display(HTML('<h6 style="color:green;font-size:130%;">Prediction from Multiple Linear Regression Model.</h6>'))
print("")
print(predictions)

df_arima_sales1 = fact_table_analysis1[['normal_date','total_price']].copy()
df_arima_sales2 = df_arima_sales1.set_index('normal_date')
df_arima_sales2['total_price'] = df_arima_sales2['total_price'].astype(int)
df_arima_sales3 = df_arima_sales2.resample('M').sum()
print(df_arima_sales3.head().to_string())

plt.figure(figsize=(7,4))
plt.xlabel("year")
plt.ylabel("Total Sales")
plt.title("yearly Sales")
plt.plot(df_arima_sales3, color='r',linewidth=1.5)
xcoords = ['2014-01-01', '2015-01-01', '2016-01-01', '2017-01-01', '2018-01-01',
           '2019-01-01','2020-01-01']
for xc in xcoords:
    plt.axvline(x=pd.to_datetime(xc), color='#C0C0C0C0', linestyle='--')
horizontal_deshline = [25000, 50000, 75000, 100000, 125000,150000]
for z in horizontal_deshline:
    plt.axhline(y= z, color='#C0C0C0C0', linestyle='--')

df_arima_sales3.shape

rolmean = round(df_arima_sales3.rolling(window=12).mean(),2)
rolstd = round(df_arima_sales3.rolling(window=12).std(),2)
plt.figure(figsize=(7,4))
actual = plt.plot(df_arima_sales3, color='red', label='Actual')
mean_12 = plt.plot(rolmean, color='green', label='Rolling Mean')
std_12 = plt.plot(rolstd, color='blue', label='Rolling Std')
plt.legend(loc='best')
plt.xlabel("year")
plt.ylabel("Total Sales")
plt.title('Rolling Mean & Standard Deviation')
plt.grid(ls = '--', c = '#99CCFF')

# For ADF test Null Hypothesis is data is not stationary
from statsmodels.tsa.stattools import adfuller
def adfuller_test(df_arima_sales3):
    print("Results of ADF Test:")
    adf_test = adfuller(df_arima_sales3)
    adf_output = pd.Series(
        adf_test[0:4], index=['ADF Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used']
        )
    for x, value in adf_test[4].items():
        adf_output["Critical Value (%s)" %x] = value
    print(adf_output)

    if adf_output[1] <= 0.05:
        print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
    else:
        print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")
adfuller_test(df_arima_sales3['total_price'])

# For KPSS test Null Hypothesis is data is stationary.
from statsmodels.tsa.stattools import kpss
def kpss_test(timeseries):
    print("Results of KPSS Test:")
    kpsstest = kpss(timeseries, regression="c")
    kpss_output = pd.Series(
        kpsstest[0:3], index=["KPSS Test Statistic", "p-value", "Lags Used"]
    )
    for x, value in kpsstest[3].items():
        kpss_output["Critical Value (%s)" % x] = value
    print(kpss_output)

    if (kpss_output['p-value'] < 0.05):
        print("The time series is not stationary")
    else:
        print("The time series is stationary")
kpss_test(df_arima_sales3['total_price'])

# Plot ACF and PACF
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 7))
plot_acf(df_arima_sales3['total_price'], lags=20, ax=ax1)
plot_pacf(df_arima_sales3['total_price'], lags=20, ax=ax2, method='ywm')  # ywm or ols
plt.show()

from statsmodels.tsa.arima.model import ARIMA
model = ARIMA(df_arima_sales3, order=(12, 0, 12))  # ARMA(1,1) since d=0
results = model.fit()

forecasts = results.get_forecast(steps=12)  # Next 12 periods
forecast_mean = forecasts.predicted_mean
confidence_intervals = forecasts.conf_int()
# Plot
plt.figure(figsize=(7, 4))
plt.plot(df_arima_sales3['total_price'], label='Actual')
plt.plot(forecast_mean, label='Forecast', color='red')
plt.fill_between(confidence_intervals.index,
                confidence_intervals.iloc[:, 0],
                confidence_intervals.iloc[:, 1],
                color='pink', alpha=0.3)
plt.legend()
plt.show()